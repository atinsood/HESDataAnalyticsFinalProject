/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.harvard.avro.twitter;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TweetRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TweetRecord\",\"namespace\":\"edu.harvard.avro.twitter\",\"fields\":[{\"name\":\"tweetId\",\"type\":\"int\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"hashtags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int tweetId;
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.util.List<java.lang.CharSequence> hashtags;

  /**
   * Default constructor.
   */
  public TweetRecord() {}

  /**
   * All-args constructor.
   */
  public TweetRecord(java.lang.Integer tweetId, java.lang.CharSequence text, java.lang.CharSequence username, java.util.List<java.lang.CharSequence> hashtags) {
    this.tweetId = tweetId;
    this.text = text;
    this.username = username;
    this.hashtags = hashtags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tweetId;
    case 1: return text;
    case 2: return username;
    case 3: return hashtags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tweetId = (java.lang.Integer)value$; break;
    case 1: text = (java.lang.CharSequence)value$; break;
    case 2: username = (java.lang.CharSequence)value$; break;
    case 3: hashtags = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tweetId' field.
   */
  public java.lang.Integer getTweetId() {
    return tweetId;
  }

  /**
   * Sets the value of the 'tweetId' field.
   * @param value the value to set.
   */
  public void setTweetId(java.lang.Integer value) {
    this.tweetId = value;
  }

  /**
   * Gets the value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'hashtags' field.
   */
  public java.util.List<java.lang.CharSequence> getHashtags() {
    return hashtags;
  }

  /**
   * Sets the value of the 'hashtags' field.
   * @param value the value to set.
   */
  public void setHashtags(java.util.List<java.lang.CharSequence> value) {
    this.hashtags = value;
  }

  /** Creates a new TweetRecord RecordBuilder */
  public static edu.harvard.avro.twitter.TweetRecord.Builder newBuilder() {
    return new edu.harvard.avro.twitter.TweetRecord.Builder();
  }
  
  /** Creates a new TweetRecord RecordBuilder by copying an existing Builder */
  public static edu.harvard.avro.twitter.TweetRecord.Builder newBuilder(edu.harvard.avro.twitter.TweetRecord.Builder other) {
    return new edu.harvard.avro.twitter.TweetRecord.Builder(other);
  }
  
  /** Creates a new TweetRecord RecordBuilder by copying an existing TweetRecord instance */
  public static edu.harvard.avro.twitter.TweetRecord.Builder newBuilder(edu.harvard.avro.twitter.TweetRecord other) {
    return new edu.harvard.avro.twitter.TweetRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for TweetRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TweetRecord>
    implements org.apache.avro.data.RecordBuilder<TweetRecord> {

    private int tweetId;
    private java.lang.CharSequence text;
    private java.lang.CharSequence username;
    private java.util.List<java.lang.CharSequence> hashtags;

    /** Creates a new Builder */
    private Builder() {
      super(edu.harvard.avro.twitter.TweetRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.harvard.avro.twitter.TweetRecord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing TweetRecord instance */
    private Builder(edu.harvard.avro.twitter.TweetRecord other) {
            super(edu.harvard.avro.twitter.TweetRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.tweetId)) {
        this.tweetId = data().deepCopy(fields()[0].schema(), other.tweetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.text)) {
        this.text = data().deepCopy(fields()[1].schema(), other.text);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.username)) {
        this.username = data().deepCopy(fields()[2].schema(), other.username);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[3].schema(), other.hashtags);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'tweetId' field */
    public java.lang.Integer getTweetId() {
      return tweetId;
    }
    
    /** Sets the value of the 'tweetId' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder setTweetId(int value) {
      validate(fields()[0], value);
      this.tweetId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'tweetId' field has been set */
    public boolean hasTweetId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'tweetId' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder clearTweetId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'text' field */
    public java.lang.CharSequence getText() {
      return text;
    }
    
    /** Sets the value of the 'text' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder setText(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.text = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'text' field has been set */
    public boolean hasText() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'text' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder clearText() {
      text = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.username = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'username' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder clearUsername() {
      username = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'hashtags' field */
    public java.util.List<java.lang.CharSequence> getHashtags() {
      return hashtags;
    }
    
    /** Sets the value of the 'hashtags' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder setHashtags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.hashtags = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'hashtags' field has been set */
    public boolean hasHashtags() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'hashtags' field */
    public edu.harvard.avro.twitter.TweetRecord.Builder clearHashtags() {
      hashtags = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TweetRecord build() {
      try {
        TweetRecord record = new TweetRecord();
        record.tweetId = fieldSetFlags()[0] ? this.tweetId : (java.lang.Integer) defaultValue(fields()[0]);
        record.text = fieldSetFlags()[1] ? this.text : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.username = fieldSetFlags()[2] ? this.username : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.hashtags = fieldSetFlags()[3] ? this.hashtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
